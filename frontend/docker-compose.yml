
# version: '3'

# services:
#   # API service (from previous assignment)
#   api:
#     image: node-api:latest
#     build:
#       context: ./api
#       dockerfile: Dockerfile
#     ports:
#       - "3000:3000"
#     networks:
#       - app-network
#     restart: unless-stopped

#   # Load Balancer
#   nginx:
#     image: nginx:latest
#     ports:
#       - "80:80"
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#     depends_on:
#       - frontend1
#       - frontend2
#       - frontend3
#     networks:
#       - app-network
#     restart: unless-stopped

#   # Multiple Frontend Instances
#   frontend1:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     environment:
#       - NODE_ID=frontend1
#     networks:
#       - app-network
#     restart: unless-stopped

#   frontend2:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     environment:
#       - NODE_ID=frontend2
#     networks:
#       - app-network
#     restart: unless-stopped

#   frontend3:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     environment:
#       - NODE_ID=frontend3
#     networks:
#       - app-network
#     restart: unless-stopped

# networks:
#   app-network:
#     driver: bridge

# Dockerfile in your React project root
# 
version: '3'

services:
  react-app-1:
    build:
      context: ./frontend
    container_name: react-app-1
    restart: always

  react-app-2:
    build:
      context: ./frontend
    container_name: react-app-2
    restart: always

  react-app-3:
    build:
      context: ./frontend
    container_name: react-app-3
    restart: always

  backend:
    build:
      context: ./backend
    container_name: spring-backend
    ports:
      - "8080:8080"
    restart: always

  nginx:
    image: nginx:alpine
    container_name: nginx-loadbalancer
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - react-app-1
      - react-app-2
      - react-app-3
    restart: always
